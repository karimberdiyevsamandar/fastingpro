
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
import { getFirestore, collection, addDoc, onSnapshot, query, orderBy, serverTimestamp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js";
import { getAuth } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
import { getStorage, ref as sRef, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-storage.js";
import { firebaseConfig } from './firebase-config.js';
const app = initializeApp(firebaseConfig); const db = getFirestore(app); const auth = getAuth(app); const storage = getStorage(app);
const $=(q,e=document)=>e.querySelector(q); const $$=(q,e=document)=>[...e.querySelectorAll(q)]; const LS={get:(k,d)=>{try{return JSON.parse(localStorage.getItem(k))??d}catch{return d}},set:(k,v)=>localStorage.setItem(k,JSON.stringify(v))};
let FOOD_DB=[]; let LOGS=LS.get("logs",[]); let LANG=LS.get("lang","uz"); let T={};
$$(".tab").forEach(t=>t.addEventListener("click",()=>show(t.dataset.id))); function show(id){$$(".tab").forEach(t=>t.classList.toggle("active",t.dataset.id===id));$$(".section").forEach(s=>s.classList.toggle("active",s.id===id));}
$("#langSelect").value=LANG; $("#langSelect").addEventListener("change",e=>{LANG=e.target.value;LS.set("lang",LANG);loadTranslations()});
async function loadTranslations(){try{const res=await fetch("translations.json");const all=await res.json();T=all[LANG]||all.uz;}catch(e){}}
async function loadFood(){const res=await fetch("food_database.json");const arr=await res.json();FOOD_DB=arr;$("#products").innerHTML=arr.map(x=>`<option value="${x.name}">`).join("");renderLibrary();}
function renderLibrary(){const body=$("#lib-body"); if(!body)return; const q=($("#lib-search")?.value||"").toLowerCase(); body.innerHTML=FOOD_DB.filter(x=>x.name.toLowerCase().includes(q)).slice(0,300).map(x=>`<tr><td>${x.name}</td><td class="right">${x.kcal}</td><td class="right">${x.protein}</td><td class="right">${x.fat}</td><td class="right">${x.carb}</td><td class="right"><button class="btn" data-add="${x.name}">Qo‘shish</button></td></tr>`).join(""); $$("#lib-body [data-add]").forEach(b=>b.addEventListener("click",()=>{ $("#food-name").value=b.dataset.add; show('log'); $("#food-grams").focus(); }));}
$("#lib-search")?.addEventListener("input",renderLibrary);
$("#log-date").value=new Date().toISOString().slice(0,10); $("#btn-add").addEventListener("click",addMeal);
function findProduct(n){const l=n.toLowerCase(); return FOOD_DB.find(x=>x.name.toLowerCase()===l)||FOOD_DB.find(x=>x.name.toLowerCase().includes(l));}
function addMeal(){const date=$("#log-date").value; const name=($("#food-name").value||'').trim(); const grams=parseFloat($("#food-grams").value); if(!name||!grams)return alert("Nom va gram kiriting"); const f=findProduct(name); if(!f)return alert("Mahsulot topilmadi: "+name); const factor=grams/100; const e={id:crypto.randomUUID(),date,name:f.name,grams,kcal:f.kcal*factor,protein:f.protein*factor,fat:f.fat*factor,carb:f.carb*factor}; LOGS.push(e); LS.set("logs",LOGS); $("#food-name").value=''; $("#food-grams").value=''; renderAll();}
function delMeal(id){LOGS=LOGS.filter(x=>x.id!==id);LS.set('logs',LOGS);renderAll()} window.delMeal=delMeal;
function mapByDay(){const m={}; for(const e of LOGS){m[e.date]??={k:0,p:0,f:0,c:0,items:[]}; m[e.date].k+=e.kcal; m[e.date].p+=e.protein; m[e.date].f+=e.fat; m[e.date].c+=e.carb; m[e.date].items.push(e);} return m;}
function renderAll(){renderLogTable(); renderDashboard();}
function renderLogTable(){const d=$("#log-date").value; const items=LOGS.filter(x=>x.date===d); $("#log-body").innerHTML=items.map(e=>`<tr><td>${e.name}</td><td class="right">${e.grams}</td><td class="right">${e.kcal.toFixed(1)}</td><td class="right">${e.protein.toFixed(1)}</td><td class="right">${e.fat.toFixed(1)}</td><td class="right">${e.carb.toFixed(1)}</td><td class="right"><button class="btn" onclick="delMeal('${e.id}')">×</button></td></tr>`).join(""); const s=items.reduce((a,x)=>({k:a.k+x.kcal,p:a.p+x.protein,f:a.f+x.fat,c:a.c+x.carb}),{k:0,p:0,f:0,c:0}); $("#log-totals").textContent=`Jami: ${s.k.toFixed(1)} kkal — P ${s.p.toFixed(1)}g • F ${s.f.toFixed(1)}g • C ${s.c.toFixed(1)}g`; }
function renderDashboard(){const map=mapByDay(); const today=new Date().toISOString().slice(0,10); const d=map[today]||{k:0,p:0,f:0,c:0}; $("#kpi-k").textContent=d.k.toFixed(0); $("#kpi-p").textContent=d.p.toFixed(1); $("#kpi-f").textContent=d.f.toFixed(1); $("#kpi-c").textContent=d.c.toFixed(1); $("#prog-k").style.width=Math.min(100,(d.k/1500*100))+'%'; $("#prog-p").style.width=Math.min(100,(d.p/90*100))+'%'; $("#prog-f").style.width=Math.min(100,(d.f/45*100))+'%'; $("#prog-c").style.width=Math.min(100,(d.c/140*100))+'%'; const last30=[]; for(let i=29;i>=0;i--){const dt=new Date(); dt.setDate(dt.getDate()-i); const dd=dt.toISOString().slice(0,10); const v=map[dd]||{k:0,p:0,f:0,c:0}; last30.push({d:dd,...v});} if(window.echarts){ echarts.init($("#chart30")).setOption({backgroundColor:'transparent',grid:{left:40,right:12,top:20,bottom:28}, xAxis:{type:'category',data:last30.map(x=>x.d.slice(5)),axisLabel:{color:'#93c5fd',rotate:35}}, yAxis:{type:'value',axisLabel:{color:'#93c5fd'}}, series:[{type:'line',smooth:true,data:last30.map(x=>x.k),areaStyle:{opacity:.15}}], tooltip:{trigger:'axis'}}); echarts.init($("#donut")).setOption({backgroundColor:'transparent',legend:{textStyle:{color:'#93c5fd'}},series:[{type:'pie',radius:['45%','70%'],data:[{name:'Protein',value:+d.p.toFixed(1)},{name:'Fat',value:+d.f.toFixed(1)},{name:'Carb',value:+d.c.toFixed(1)}]}]}); const st=echarts.init($("#stackedWeek")); const monday=new Date(); const day=monday.getDay(); const diff=(day===0?-6:1)-day; monday.setDate(monday.getDate()+diff); const days=Array.from({length:7},(_,i)=>{const x=new Date(monday); x.setDate(monday.getDate()+i); return x.toISOString().slice(0,10)}); const wk=days.map(d=>map[d]||{k:0,p:0,f:0,c:0}); st.setOption({backgroundColor:'transparent',legend:{textStyle:{color:'#93c5fd'}},grid:{left:28,right:10,top:28,bottom:22}, xAxis:{type:'category',data:days.map(d=>d.slice(5)),axisLabel:{color:'#93c5fd'}}, yAxis:{type:'value',axisLabel:{color:'#93c5fd'}}, series:[{name:'P',type:'bar',stack:'g',data:wk.map(x=>+x.p.toFixed(1))},{name:'F',type:'bar',stack:'g',data:wk.map(x=>+x.f.toFixed(1))},{name:'C',type:'bar',stack:'g',data:wk.map(x=>+x.c.toFixed(1))}], tooltip:{trigger:'axis'}}); }}
async function postBlog(text, file){ try{ let img=null; if(file){ const r=sRef(storage,'posts/'+crypto.randomUUID()); const up=await uploadBytes(r,file); img=await getDownloadURL(up.ref);} await addDoc(collection(db,'posts'),{text,img,ts:serverTimestamp()}); }catch(e){ alert('Firebase sozlanmagan (READMEga qarang)'); }}
$("#btnPost")?.addEventListener("click",()=>{const t=$("#postText").value.trim(); const f=$("#postImg").files[0]; if(!t && !f)return; postBlog(t,f); $("#postText").value=''; $("#postImg").value='';});
function watchPosts(){ try{ const q=query(collection(db,'posts'),orderBy('ts','desc')); onSnapshot(q,snap=>{ const el=$("#posts"); el.innerHTML=''; snap.forEach(d=>{ const v=d.data(); const ts=v.ts?.toDate?.()?.toLocaleString?.()||''; el.innerHTML+=`<div class="post"><div class="meta">${ts}</div><div>${v.text||''}</div>${v.img?`<div><img src="${v.img}" style="max-width:100%;border-radius:8px;margin-top:6px"></div>`:''}</div>`; }); }); }catch(e){} }
async function sendChat(msg){ try{ await addDoc(collection(db,'chat'),{msg,ts:serverTimestamp()}); }catch(e){ alert('Firebase sozlanmagan'); }}
$("#btnSend")?.addEventListener("click",()=>{const m=$("#chatMsg").value.trim(); if(!m)return; sendChat(m); $("#chatMsg").value='';});
function watchChat(){ try{ const q=query(collection(db,'chat'),orderBy('ts','asc')); onSnapshot(q,snap=>{ const box=$("#chat"); box.innerHTML=''; snap.forEach(d=>{ const v=d.data(); const ts=v.ts?.toDate?.()?.toLocaleTimeString?.()||''; box.innerHTML+=`<div class="message"><div class="who">${ts}</div><div>${v.msg}</div></div>`; box.scrollTop=box.scrollHeight; }); }); }catch(e){} }
$("#btnSaveProfile")?.addEventListener("click",()=>{const p={name:$("#pName").value,gender:$("#pGender").value,age:+$("#pAge").value,height:+$("#pHeight").value,weight:+$("#pWeight").value,goal:+$("#pGoal").value}; LS.set('profile',p); renderBMI();});
function renderBMI(){ const p=LS.get('profile',{}); if(!p.height||!p.weight){ $("#bmiBox").textContent='BMI: —'; return;} const m=p.weight/((p.height/100)**2); $("#bmiBox").textContent=`BMI: ${m.toFixed(1)}`;}
$("#btnClear").addEventListener("click",()=>{ if(confirm("Barcha local ma'lumotlarni o‘chirish?")){ localStorage.clear(); location.reload(); }});
document.addEventListener("DOMContentLoaded",async()=>{ if('serviceWorker' in navigator){ try{ navigator.serviceWorker.register('./service-worker.js'); }catch(e){} } await loadTranslations(); await loadFood(); renderLibrary(); renderAll(); renderBMI(); watchPosts(); watchChat(); });
